/*
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.
Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
*/

class Solution {
public:
    int mod = 1e9+7;
    
    vector<int>nsl(vector<int>& a){
        int n = a.size();
        vector<int>ans(n);
        stack<int>s;
        
        for(int i= 0;i<n;i++){
            if(s.empty()){ans[i]=-1;}
            else if(a[s.top()]<a[i]){ans[i] = s.top();}
            else{
                while(!s.empty()&&a[s.top()]>=a[i])s.pop();
                if(s.empty())ans[i] = -1;
                else ans[i] = s.top();
            }
            s.push(i);
        }        
        return ans;
    }

    vector<int>nsr(vector<int>& a){
        int n = a.size();
        vector<int>ans(n);
        stack<int>s;
        
        for(int i= n-1;i>=0;i--){
            if(s.empty()){ans[i]=n;}
            else if(a[s.top()]<a[i]){ans[i] = s.top();}
            else{
                while(!s.empty()&&a[s.top()]>a[i])s.pop();
                if(s.empty())ans[i] = n;
                else ans[i] = s.top();
            }
            s.push(i);
        }        
        return ans;
    }

    
    int sumSubarrayMins(vector<int>& arr) {
        long long  ans = 0;
        vector<int>nsL = nsl(arr);
        vector<int>nsR = nsr(arr);
                
        for(int i = 0;i<arr.size();i++){
            long long int temp = (((i-nsL[i])*(nsR[i]-i))+mod)%mod;
            temp = (temp*arr[i]+mod)%mod;
            ans+=temp;
            ans = (ans+mod)%mod;
        }
        return ans;
    }
};